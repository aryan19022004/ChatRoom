<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatroom: <%= room %></title>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: Arial, sans-serif; }
        body { display: flex; flex-direction: column; align-items: center; height: 100vh; background: #f0f0f0; }

        .chat-container {
            width: 90%; max-width: 500px;
            background: white; color: black;
            border-radius: 10px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            display: flex; flex-direction: column;
            height: 80vh;
        }
        
        #messages {
            flex: 1; overflow-y: auto; padding: 10px;
            border-bottom: 1px solid #ddd; background: #f9f9f9;
            display: flex; flex-direction: column;
        }
        
        .message {
            max-width: 75%; padding: 8px 12px; border-radius: 10px;
            margin: 5px; display: inline-block;
            word-wrap: break-word;
        }
        
        .self { background: #dcf8c6; align-self: flex-end; }
        .other { background: #eaeaea; align-self: flex-start; }
        .username { font-weight: bold; color: #007bff; display: block; }
        
        .audio-container {
            display: flex; align-items: center;
            justify-content: center;
            width: 100%;
            margin-top: 5px;
        }
        
        .join-message {
            text-align: center; color: gray; font-size: 0.9rem;
            margin: 5px 0;
        }
        
        #message-input {
            display: flex; align-items: center;
            padding: 10px; background: white;
        }
        input {
            flex: 1; padding: 10px;
            border: 1px solid #ddd; border-radius: 5px;
        }
        
        .buttons {
            display: flex; align-items: center; gap: 5px;
        }
        button {
            padding: 8px 10px; border: none;
            background: #28a745; color: white;
            border-radius: 5px; cursor: pointer;
        }
        
        button:hover { background: #218838; }
        .icon-btn { font-size: 1.2rem; background: none; color: #007bff; cursor: pointer; border: none; }
        
        #file-input { display: none; }
        
        @media (max-width: 600px) {
            .chat-container {
                width: 100%; height: 100vh; border-radius: 0;
            }
            #message-input { padding: 8px; }
            button { padding: 6px 8px; }
        }
    </style>
</head>
<body>
    <h2>Chatroom: <%= room %></h2>
    <div class="chat-container">
        <div id="messages"></div>
        <div id="typing-indicator" class="join-message" style="display: none;"></div>

        <div id="message-input">
            <input id="message" type="text" placeholder="Type a message...">
            <div class="buttons">
                <button onclick="sendMessage()">Send</button>
                <button class="icon-btn" onclick="document.getElementById('file-input').click()">📎</button>
                <input type="file" id="file-input" accept="image/*" capture="environment">
                <button class="icon-btn" id="voice-btn" onclick="toggleRecording()">🎤</button>
            </div>
        </div>
    </div>
    
    
    <script>
        const socket = io();
        const room = "<%= room %>";
        let username = "Anonymous";
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        
        function joinChat() {
            socket.emit("joinRoom", { username, room });
        }
        
        window.onload = function () {
            setTimeout(() => {
                username = prompt("Enter your name");
                joinChat();
            }, 1000);
        };
        
        socket.on("message", (msg) => {
            const messageContainer = document.getElementById("messages");
            const messageElement = document.createElement("div");
            messageElement.classList.add("message", msg.username === username ? "self" : "other");
            
            if (msg.type === "text") {
                messageElement.innerHTML = `<span class='username'>${msg.username}:</span> ${msg.text}`;
            } else if (msg.type === "file") {
                messageElement.innerHTML = `<span class='username'>${msg.username}:</span> <a href="${msg.fileUrl}" target="_blank">Download File</a>`;
            } else if (msg.type === "audio") {
                messageElement.innerHTML = `<span class='username'>${msg.username}:</span> <div class='audio-container'><audio controls src="${msg.audioUrl}"></audio></div>`;
            }
            
            messageContainer.appendChild(messageElement);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        socket.on("userJoined", (msg) => {
            const messageContainer = document.getElementById("messages");
            const joinElement = document.createElement("div");
            joinElement.classList.add("join-message");
            joinElement.textContent = msg;
            messageContainer.appendChild(joinElement);
        });


        socket.on("userleft", (msg) => {
        const messageContainer = document.getElementById("messages");
        const leaveElement = document.createElement("div");
        leaveElement.classList.add("join-message");
        leaveElement.textContent = msg;
        messageContainer.appendChild(leaveElement);
});


        function sendMessage() {
            const messageInput = document.getElementById("message");
            const message = messageInput.value.trim();
            if (message) {
                socket.emit("chatMessage", { room, username, message });
                messageInput.value = "";
            }
        }

        function toggleRecording() {
    const voiceBtn = document.getElementById("voice-btn");
    
    if (!isRecording) {
        navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
            mediaRecorder = new MediaRecorder(stream, { mimeType: "audio/webm" });
            audioChunks = [];
            mediaRecorder.start();
            isRecording = true;
            voiceBtn.textContent = "⏹";

            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };
        }).catch(error => {
            console.error("Error accessing microphone:", error);
        });
    } else {
        mediaRecorder.stop();
        isRecording = false;
        voiceBtn.textContent = "🎤";

        mediaRecorder.onstop = () => {
            const audioBlob = new Blob(audioChunks, { type: "audio/webm" });

            // Convert audio to Base64
            const reader = new FileReader();
            reader.readAsDataURL(audioBlob);
            reader.onloadend = function () {
                const base64Audio = reader.result;
                socket.emit("voiceMessage", { room, username, audioUrl: base64Audio });
            };
        };
    }
}

const messageInput = document.getElementById("message");
let typingTimeout;

messageInput.addEventListener("input", () => {
    socket.emit("typing", room);
    
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        socket.emit("stopTyping", room);
    }, 1000); // Stop typing after 1 second of inactivity
});

socket.on("userTyping", (username) => {
    const typingIndicator = document.getElementById("typing-indicator");
    if (!typingIndicator) {
        const indicator = document.createElement("div");
        indicator.id = "typing-indicator";
        indicator.classList.add("join-message");
        indicator.textContent = `${username} is typing...`;
        document.getElementById("messages").appendChild(indicator);
    }
});

socket.on("userStoppedTyping", () => {
    const typingIndicator = document.getElementById("typing-indicator");
    if (typingIndicator) typingIndicator.remove();
});


    </script>
</body>
</html>
